generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role?
  image     String?
  city      String?
  experience Int?
  specialization String?
  languages String[]
  phone     String?
  education String?
  certifications String[]
  status    String   @default("active")
  createdAt DateTime @default(now())
}

enum Role {
  arbitrator
  lawyer
}

model Arbitration {
  id           String                  @id @default(cuid())
  clientName   String
  type         String
  status       String                  @default("new")
  description  String?
  assignedTo   String?
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  documents    ArbitrationDocument[]
}

model ArbitrationDocument {
  id             String       @id @default(cuid())
  arbitrationId  String
  name           String
  url            String
  createdAt      DateTime     @default(now())
  arbitration    Arbitration  @relation(fields: [arbitrationId], references: [id])
}

model Mediation {
  id           String               @id @default(cuid())
  clientName   String
  email        String
  status       String               @default("new")
  description  String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  documents    MediationDocument[]
}

model MediationDocument {
  id            String     @id @default(cuid())
  mediationId   String
  name          String
  url           String
  createdAt     DateTime   @default(now())
  mediation     Mediation  @relation(fields: [mediationId], references: [id])
}

model News {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?
  body        String?
  mainImage   String?
  category    String?
  urgent      Boolean  @default(false)
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Photo {
  id        String   @id @default(cuid())
  caption   String?
  url       String
  createdAt DateTime @default(now())
}

model Video {
  id        String   @id @default(cuid())
  title     String
  type      String   // youtube | mp4
  url       String
  thumbnail String?
  views     Int      @default(0)
  createdAt DateTime @default(now())
}

model ContactMessage {
  id         String   @id @default(cuid())
  firstName  String?
  lastName   String?
  email      String
  phone      String?
  subject    String?
  message    String
  preferred  String?  // email | phone
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Booking {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String?
  city      String
  date      DateTime
  time      String
  notes     String?
  createdAt DateTime @default(now())
}

model Regulation {
  id          String   @id @default(cuid())
  area        String   // national-sports | international | national-commercial | etc
  title       String
  description String?
  category    String?
  date        String?
  pages       Int?
  size        String?
  language    String?
  url         String
  createdAt   DateTime @default(now())
}

model Ruling {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  sport       String
  year        Int
  caseNumber  String   @unique
  summary     String?
  pdfUrl      String?
  decidedAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  documents   RulingDocument[]
}

model RulingDocument {
  id        String  @id @default(cuid())
  rulingId  String
  name      String
  url       String
  createdAt DateTime @default(now())
  ruling    Ruling  @relation(fields: [rulingId], references: [id])
}

/// Stores submissions from /forms/arbitration and /forms/commercial
model ArbitrationRequest {
  id                     String   @id @default(cuid())
  area                   String   // sports | commercial
  applicantType          String   // individual | organization
  fullName               String
  nationalId             String
  email                  String
  phone                  String
  address                String
  organizationName       String?
  organizationRegistration String?
  representativeName     String?
  representativePosition String?
  disputeType            String   // contract | disciplinary | financial | administrative | other
  disputeCategory        String   // football | ... | other  OR custom for commercial
  disputeTitle           String
  disputeDescription     String
  disputeValue           String?
  disputeDate            String
  otherPartyName         String
  otherPartyType         String   // individual | organization
  otherPartyContact      String?
  otherPartyAddress      String
  arbitratorPreference   String   // any | specific | exclude
  preferredArbitrator    String?
  excludedArbitrator     String?
  arbitrationLanguage    String   // arabic | english | both
  urgentCase             Boolean  @default(false)
  hasLegalRepresentation Boolean  @default(false)
  lawyerName             String?
  lawyerLicense          String?
  lawyerContact          String?
  documentsDescription   String
  agreesToTerms          Boolean  @default(false)
  agreesToFees           Boolean  @default(false)
  confirmAccuracy        Boolean  @default(false)
  createdAt              DateTime @default(now())
}
